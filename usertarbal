#!/usr/local/bin/zsh
# Users Tarbal
STARTTIME=$(date +%s)
FileDate="${1:-$(date +%F)}"
CloudDir="DropBox"
remoteDir="${CloudDir}:/usertarbal"
remoteDest="${remoteDir}/${FileDate}"
localDir="usertarbal"
cd /
[ ! -d /${localDir} ] && mkdir -p /${localDir}
[ ! -d /${localDir}/${FileDate} ] && mkdir -p /${localDir}/${FileDate}

check_error () {
	local result=${1}
	if [ ${result} -eq 0 ] || [ ${result} -eq 1 ]; then
		printf "Done! (${result})\n"
	else
		printf "FAILED! (${result})\n"
		r_errors=$((r_errors+1))
	fi
}

backupNow () {
# Backup ${Dir} directory
	local User=${1}
	local Dir=${2}
	printf "\n**** ${User} ****"
	FileName="${User}-dir-${FileDate}.tgz"
	rm -f /${localDir}/${FileDate}/${FileName} >/dev/null 2>&1
	printf "\n  **** Making \"${User}\" tarbal (/${localDir}/${FileDate}/${FileName})..."
	tar -czf /${localDir}/${FileDate}/${FileName} -X /root/scripts/${User}-Exclude ${Dir}
	results=$?
	check_error ${results}
}

# Work starts here
if \ls "${HOME}/usertarbal\*.err" >/dev/null 2>&1; then
	rm -f ${HOME}/usertarbal*.err > /dev/null 2>&1
fi
r_errors=0
for U D in root root bram home/bram h4hm home/h4hm y4x home/y4x mmost home/mmost tim home/tim joe home/joe linuxbrew home/linuxbrew
do
	STARTTIME2=$(date +%s)
	backupNow ${U} ${D}
	Results="$(ls -1rtAhl /${localDir}/${FileDate}/${FileName}| awk '{print $5,$6,$7,$8,$9}')"
	printf "    ${Results}\n"
	STOPTIME2=$(($(date +%s)-STARTTIME2))
	STOPSTR2="    ** \"${U}\" Tarball Backup completed in"
  show_time ${STOPTIME2} "${STOPSTR2}"
done
# Show number of t_errors during Backup transfer.
echo -e "\n**** Tarbals completed with ${r_errors} errors.\n"
# Move files to Dropbox
printf "**** Moving local tarbal files to ${remoteDir}/${FileDate}/..."
rclone move /${localDir}/${FileDate} ${remoteDir}/${FileDate} --cache-db-purge 2>/root/${localDir}${FileDate}.err
results=$?
if [ ${results} -eq 0 ] || [ ${results} -eq 1 ]; then
	echo "Done."
else
	echo "Errors."
fi
# Delete old backups
#
echo "**** Delete Old usertarbal Backups"
maxNrOfBackups=6
nrOfBackups=$(rclone lsf ${remoteDir} --max-depth 1 | wc -l)
if [[ nrOfBackups -gt maxNrOfBackups ]]; then
	echo "  ** Removing old backups"
	rclone lsf ${remoteDir} --max-depth 1 | sort -r | tail -$(( nrOfBackups - maxNrOfBackups )) |
	while read -r dirToRemove; do
		printf "%s" "  ** rclone purge ${remoteDir}/${dirToRemove}..."
		rclone purge ${remoteDir}/${dirToRemove} --drive-use-trash=false
		results=$?
		if [[ results -eq 0 ]]; then
			echo "Done."
			rm -rf /${localDir}/${FileDate} >/dev/null 2>&1
		else
			echo "Errors."
			rm -rf /${localDir}/${FileDate} >/dev/null 2>&1
		fi
	done
	if [ ! -s /root/${localDir}${FileDate}.err ]; then
		rm -f /root/${localDir}${FileDate}.err
	fi
else
	echo "  ** No Old Backups to Delete"
fi
# Show time to do the transfer
STOPTIME=$(($(date +%s)-STARTTIME))
echo
show_time ${STOPTIME} "**** User Tarbal Backup Backups completed in"
echo
ErrFileName="${HOME}/${localDir}${FileDate}.err"
if [[ -f ${ErrFileName} && ! -s ${ErrFileName} ]]; then
	rm -f ${ErrFileName}
	echo "Deleted empty file: ${ErrFileName}"
else
	echo "File does not exist or is not empty: ${ErrFileName}"
fi
