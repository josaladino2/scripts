#!/usr/local/bin/zsh
STARTTIME=$(date +%s)
FileName=$(date +"%Y%m%d")
FileDateDir="$(date +%F)"
FileDateDir1=$(date +%F --date="1 day ago")
FileDateDir7=$(date +%F --date="7 days ago")
FileName1=$(date +%Y%m%d --date="1 day ago")
FileName7=$(date +%Y%m%d --date="7 days ago")
DestDrive="DropBox"
DestDir="mariadb-Backups"
CloudDir="home/Cloud"
terrors=0
mkdir -p /${DestDir}/${FileDateDir}/
localDir="${DestDir}/${FileDateDir}/"
#mkdir -p /${CloudDir}/${DestDrive}/${DestDir}/${FileDateDir}/
remoteDir=${DestDrive}:/${DestDir}/${FileDateDir}/
#/root/scripts/rclonemount db
#results=$?
#if [ $results -eq 0 ]; then
#	cd "/${DestDir}"
	# Functions used
	#. ~/.bash_functions
cd "/${DestDir}"

backupnow () {
	local db=${1}
	ThisFile="${db}-${FileName}.sql.gz"
	printf "*** ${db}\n"
	printf "Exporting ${db} database(s) to /${localDir}/${ThisFile}..."
	if [ "${db}" = "all" ]; then
		{ mysqldump -uroot --all-databases | gzip -c > /${localDir}/${ThisFile}; } >/dev/null 2>&1 && \
			printf "Done.\n" || \
			{ printf " Errors.\n"
				terrors=$((terrors+1))
				printf "\n${db} DB Backup with errors.\n\n"; }
	else
		{ mysqldump -uroot --databases ${db} | gzip -c > /${localDir}/${ThisFile}; } >/dev/null 2>&1 && \
			printf "Done.\n" || \
			{ printf " Errors.\n"
				terrors=$((terrors+1))
				printf "\n${db} DB Backup with errors.\n\n"; }
	fi
	echo
}

movebackup () {
	local errors=0
	rm -f /var/log/rclonedb.log
	printf "*** Copying /${localDir} to ${DestDrive}:/${DestDir}/${FileDateDir}..."
	rclone copy /${localDir} ${DestDrive}:/${DestDir}/${FileDateDir} \
		--cache-db-purge \
		--log-file "/var/log/rclonedb.log" \
		--log-level INFO \
		--buffer-size 64M \
		--transfers 3 \
		--drive-use-trash=true \
		--dropbox-chunk-size 150Mi >/dev/null 2>&1 
	results=$?
	if [ $results = 0 ]; then
		echo "Done."
		printf "\n%s" "Deleting /${localDir}..."
		rm -rf /${localDir} >/dev/null 2>&1 && echo "Done." || { echo "Errors."; terrors=$((terrors+1)); }
	else
		printf " Errors.\n"
		terrors=$((terrors+1))
		printf "\nUploaded Backup with errors.\n\n"
		terrors=$((terrors+1))
	fi
}

# Delete old backups
#
deleteoldbackups () {
	maxNrOfBackups=8
	echo "\n**** Delete Old Nextcloud Backups"
	nrOfBackups=$(rclone lsf ${DestDrive}:/${DestDir} --include "/2*/" --max-depth 1 | wc -l)
	if [ ${nrOfBackups} -gt ${maxNrOfBackups} ]; then
		echo "  ** Removing old backups"
		rclone lsf ${DestDrive}:/${DestDir} --include "/2*/" | \
			sort -r | tail -$(( nrOfBackups - maxNrOfBackups )) | \
			while read -r dirToRemove; do
				echo "${DestDrive}:/${DestDir}/${dirToRemove}"
				printf "    rclone purge ${DestDrive}:/${DestDir}/${dirToRemove}..."
				rclone purge ${DestDrive}:/${DestDir}/${dirToRemove} --drive-use-trash=true
				results=$?
				if [ $results = 0 ]; then
					echo "Done"
				else
					echo "Errors."; errors=$((errors+1))
				fi
			done
	else
		echo "  ** No Old Backups to Delete"
	fi
	echo
}

	for DB in $(mariadb -e 'show databases' -s --skip-column-names); do
		if [ "$DB" = "information_schema" ] || [ "$DB" = "performance_schema" ]; then
			:
		else
			backupnow ${DB}
		fi
	done
	backupnow "all"
	movebackup
	deleteoldbackups
	printf "*** rclone lsf for ${DestDrive}:/${DestDir}.\n"
	rclone tree ${DestDrive}:/${DestDir} --exclude "/Save*/" --human-readable 
#	printf "*** rclone lsf for ${DestDrive}:/${DestDir}/${FileDateDir}/* files.\n"
#	rclone lsf --format "tsp" --separator "	" ${DestDrive}:/${DestDir}/${FileDateDir} --human-readable 
	printf "\n*** About/Size of ${DestDrive}/${DestDir}/${FileDateDir}:\n"
	rclone about ${DestDrive}:/
	# Show time to do the transfer
	printf "\nDB Backups completed with ** ${terrors} ** total errors.\n\n"
	STOPTIME=$(($(date +%s)-STARTTIME))
	show_time ${STOPTIME} "**** mariadb ${DestDrive}:/${DestDir}/${FileDateDir} completed in"
	echo
#else
#	echo "${DestDrive} not mounted"
#	echo
#fi
