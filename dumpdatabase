#!/bin/zsh
STARTTIME=$(date +%s)
FileName=$(date +"%Y%m%d")
FileDateDir="$(date +%F)"
FileDateDir1=$(date +%F --date="1 day ago")
FileDateDir7=$(date +%F --date="7 days ago")
FileName1=$(date +%Y%m%d --date="1 day ago")
FileName7=$(date +%Y%m%d --date="7 days ago")
DestDrive="DropBox"
DestDir="MySQL-Backups"
CloudDir="home/Cloud"
mkdir -p /${DestDir}/${FileDateDir}/
localDir=${DestDir}/${FileDateDir}/
mkdir -p /${CloudDir}/${DestDrive}/${DestDir}/${FileDateDir}/
remoteDir=${DestDrive}:/${DestDir}/${FileDateDir}/
#/root/scripts/rclonemount DB
results=$?
if [ $results -eq 0 ]; then
	cd "/${DestDir}"
	# Functions used
	#. ~/.bash_functions

backupnow () {
	local db=${1}
	local errors=0
	ThisFile="${db}-${FileName}.sql.gz"
	printf "*** ${db}\n"
	printf "Exporting ${db} database to ${DestDir}/${FileDateDir}/${ThisFile}"
	if [ "${db}" = "all" ]; then
		{ /usr/bin/mysqldump -uroot --all-databases | gzip -c > ${FileDateDir}/${ThisFile}; } >/dev/null 2>&1 && \
			printf " Done\n" || { printf " Errors.\n"; errors=$((errors+1)); }
	else
		{ /usr/bin/mysqldump -uroot --databases ${db} | gzip -c > ${FileDateDir}/${ThisFile}; } >/dev/null 2>&1 && \
		printf " Done\n" || { printf " Errors.\n"; errors=$((errors+1)); }
	fi
	echo
}

movebackup () {
	printf "*** Uploading ${FileDateDir} to ${DestDrive}:/${DestDir}/${FileDateDir}..."
	rclone moveto ${FileDateDir} ${DestDrive}:/${DestDir}/${FileDateDir} >/dev/null 2>&1 && \
	results=$?
	if [ $results = 0 ]; then
		echo "Done"
	else
		echo "Errors."
	fi
	printf "\n${db} DB Backup with ** ${errors} ** errors.\n\n"
}

# Delete old backups
#
deleteoldbackups () {
	maxNrOfBackups=10
	echo "**** Delete Old Nextcloud Backups"
	nrOfBackups=$(rclone lsf ${DestDrive}:/${DestDir} --include /2*/ --max-depth 1 | wc -l)
	if [ ${nrOfBackups} -gt ${maxNrOfBackups} ]; then
		echo "  ** Removing old backups"
		rclone lsf ${DestDrive}:/${DestDir} --include /2*/ | \
			sort -r | tail -$(( nrOfBackups - maxNrOfBackups )) | \
			while read -r dirToRemove; do
				echo "${DestDrive}:/${DestDir}/${dirToRemove}"
				printf "    rclone purge ${DestDrive}:/${DestDir}/${dirToRemove}..."
				rclone purge ${DestDrive}:/${DestDir}/${dirToRemove} --drive-use-trash=false
				results=$?
				if [ $results = 0 ]; then
					echo "Done"
				else
					echo "Errors."
				fi
			done
	else
		echo "  ** No Old Backups to Delete"
	fi
	echo
}

	for DB in $(mysql -e 'show databases' -s --skip-column-names); do
		if [ "$DB" = "information_schema" ] || [ "$DB" = "performance_schema" ]; then
			:
		else
			backupnow ${DB}
		fi
	done
	backupnow "all"
	movebackup
	deleteoldbackups
	printf "***rclone lsf for ${DestDrive}:/${DestDir}/${FileDateDir}/* files.\n"
	rclone lsf --format "tsp" --separator "	" ${DestDrive}:/${DestDir}/${FileDateDir}
	printf "\n***About/Size of ${DestDrive}/${DestDir}/${FileDateDir}:\n"
	rclone about ${DestDrive}:/
	# Show time to do the transfer
	STOPTIME=$(($(date +%s)-STARTTIME))
	echo
	echo "**** MySQL-Backup ${DestDrive}:/${DestDir}/${FileDateDir} completed in $(show_time ${STOPTIME})"
else
	echo
	echo "${DestDrive} not mounted"
fi
